// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedLiquidity extends ethereum.Event {
  get params(): AddedLiquidity__Params {
    return new AddedLiquidity__Params(this);
  }
}

export class AddedLiquidity__Params {
  _event: AddedLiquidity;

  constructor(event: AddedLiquidity) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tok1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tok2(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get liquidityAdded(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amt1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amt2(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class DepositMade extends ethereum.Event {
  get params(): DepositMade__Params {
    return new DepositMade__Params(this);
  }
}

export class DepositMade__Params {
  _event: DepositMade;

  constructor(event: DepositMade) {
    this._event = event;
  }

  get _wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemovedLiquidity extends ethereum.Event {
  get params(): RemovedLiquidity__Params {
    return new RemovedLiquidity__Params(this);
  }
}

export class RemovedLiquidity__Params {
  _event: RemovedLiquidity;

  constructor(event: RemovedLiquidity) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tok1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tok2(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get liquidityRemoved(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amt1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amt2(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class SwapMade extends ethereum.Event {
  get params(): SwapMade__Params {
    return new SwapMade__Params(this);
  }
}

export class SwapMade__Params {
  _event: SwapMade;

  constructor(event: SwapMade) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amtIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amtOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferMade extends ethereum.Event {
  get params(): TransferMade__Params {
    return new TransferMade__Params(this);
  }
}

export class TransferMade__Params {
  _event: TransferMade;

  constructor(event: TransferMade) {
    this._event = event;
  }

  get _sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawMade extends ethereum.Event {
  get params(): WithdrawMade__Params {
    return new WithdrawMade__Params(this);
  }
}

export class WithdrawMade__Params {
  _event: WithdrawMade;

  constructor(event: WithdrawMade) {
    this._event = event;
  }

  get _wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CentroMain___getUbeReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CentroMain__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class CentroMain__getAccountOverviewResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class CentroMain__getWalletResult {
  value0: string;
  value1: Address;

  constructor(value0: string, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class CentroMain__getWalletBasisResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class CentroMain__walletIDToWalletResult {
  value0: string;
  value1: string;
  value2: Address;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: Address,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class CentroMain extends ethereum.SmartContract {
  static bind(address: Address): CentroMain {
    return new CentroMain("CentroMain", address);
  }

  _getPoolAddress(lp: Address): Address {
    let result = super.call(
      "_getPoolAddress",
      "_getPoolAddress(address):(address)",
      [ethereum.Value.fromAddress(lp)]
    );

    return result[0].toAddress();
  }

  try__getPoolAddress(lp: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_getPoolAddress",
      "_getPoolAddress(address):(address)",
      [ethereum.Value.fromAddress(lp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _getUbeReserves(
    _tok1: Address,
    _tok2: Address
  ): CentroMain___getUbeReservesResult {
    let result = super.call(
      "_getUbeReserves",
      "_getUbeReserves(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_tok1), ethereum.Value.fromAddress(_tok2)]
    );

    return new CentroMain___getUbeReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try__getUbeReserves(
    _tok1: Address,
    _tok2: Address
  ): ethereum.CallResult<CentroMain___getUbeReservesResult> {
    let result = super.tryCall(
      "_getUbeReserves",
      "_getUbeReserves(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_tok1), ethereum.Value.fromAddress(_tok2)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CentroMain___getUbeReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  addLiquidity(
    _tok1: Address,
    _tok2: Address,
    _amt1: BigInt,
    _amt2: BigInt,
    _walletID: BigInt
  ): CentroMain__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_tok1),
        ethereum.Value.fromAddress(_tok2),
        ethereum.Value.fromUnsignedBigInt(_amt1),
        ethereum.Value.fromUnsignedBigInt(_amt2),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );

    return new CentroMain__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_addLiquidity(
    _tok1: Address,
    _tok2: Address,
    _amt1: BigInt,
    _amt2: BigInt,
    _walletID: BigInt
  ): ethereum.CallResult<CentroMain__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_tok1),
        ethereum.Value.fromAddress(_tok2),
        ethereum.Value.fromUnsignedBigInt(_amt1),
        ethereum.Value.fromUnsignedBigInt(_amt2),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CentroMain__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  addressToWalletIDs(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "addressToWalletIDs",
      "addressToWalletIDs(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_addressToWalletIDs(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToWalletIDs",
      "addressToWalletIDs(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardFromPair(_pair: Address, _walletId: BigInt): BigInt {
    let result = super.call(
      "claimRewardFromPair",
      "claimRewardFromPair(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_pair),
        ethereum.Value.fromUnsignedBigInt(_walletId)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewardFromPair(
    _pair: Address,
    _walletId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardFromPair",
      "claimRewardFromPair(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_pair),
        ethereum.Value.fromUnsignedBigInt(_walletId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardFromTokens(
    _tok1: Address,
    _tok2: Address,
    _walletId: BigInt
  ): BigInt {
    let result = super.call(
      "claimRewardFromTokens",
      "claimRewardFromTokens(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tok1),
        ethereum.Value.fromAddress(_tok2),
        ethereum.Value.fromUnsignedBigInt(_walletId)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewardFromTokens(
    _tok1: Address,
    _tok2: Address,
    _walletId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardFromTokens",
      "claimRewardFromTokens(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tok1),
        ethereum.Value.fromAddress(_tok2),
        ethereum.Value.fromUnsignedBigInt(_walletId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountIDs(_user: Address): Array<BigInt> {
    let result = super.call(
      "getAccountIDs",
      "getAccountIDs(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigIntArray();
  }

  try_getAccountIDs(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAccountIDs",
      "getAccountIDs(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAccountOverview(): CentroMain__getAccountOverviewResult {
    let result = super.call(
      "getAccountOverview",
      "getAccountOverview():(address[],uint256[])",
      []
    );

    return new CentroMain__getAccountOverviewResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getAccountOverview(): ethereum.CallResult<
    CentroMain__getAccountOverviewResult
  > {
    let result = super.tryCall(
      "getAccountOverview",
      "getAccountOverview():(address[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CentroMain__getAccountOverviewResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getMoolaBalance(_token: Address, _walletID: BigInt): BigInt {
    let result = super.call(
      "getMoolaBalance",
      "getMoolaBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMoolaBalance(
    _token: Address,
    _walletID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMoolaBalance",
      "getMoolaBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolAddress(_tok1: Address, _tok2: Address): Address {
    let result = super.call(
      "getPoolAddress",
      "getPoolAddress(address,address):(address)",
      [ethereum.Value.fromAddress(_tok1), ethereum.Value.fromAddress(_tok2)]
    );

    return result[0].toAddress();
  }

  try_getPoolAddress(
    _tok1: Address,
    _tok2: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPoolAddress",
      "getPoolAddress(address,address):(address)",
      [ethereum.Value.fromAddress(_tok1), ethereum.Value.fromAddress(_tok2)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWallet(_walletID: BigInt): CentroMain__getWalletResult {
    let result = super.call(
      "getWallet",
      "getWallet(uint256):(string,address)",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );

    return new CentroMain__getWalletResult(
      result[0].toString(),
      result[1].toAddress()
    );
  }

  try_getWallet(
    _walletID: BigInt
  ): ethereum.CallResult<CentroMain__getWalletResult> {
    let result = super.tryCall(
      "getWallet",
      "getWallet(uint256):(string,address)",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CentroMain__getWalletResult(value[0].toString(), value[1].toAddress())
    );
  }

  getWalletAddress(_walletID: BigInt): Address {
    let result = super.call(
      "getWalletAddress",
      "getWalletAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );

    return result[0].toAddress();
  }

  try_getWalletAddress(_walletID: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWalletAddress",
      "getWalletAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWalletBasis(_walletID: BigInt): CentroMain__getWalletBasisResult {
    let result = super.call(
      "getWalletBasis",
      "getWalletBasis(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );

    return new CentroMain__getWalletBasisResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getWalletBasis(
    _walletID: BigInt
  ): ethereum.CallResult<CentroMain__getWalletBasisResult> {
    let result = super.tryCall(
      "getWalletBasis",
      "getWalletBasis(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CentroMain__getWalletBasisResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  makeSwap(
    _tokIn: Address,
    _tokOut: Address,
    _amtIn: BigInt,
    _minOut: BigInt,
    _walletID: BigInt
  ): BigInt {
    let result = super.call(
      "makeSwap",
      "makeSwap(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokIn),
        ethereum.Value.fromAddress(_tokOut),
        ethereum.Value.fromUnsignedBigInt(_amtIn),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );

    return result[0].toBigInt();
  }

  try_makeSwap(
    _tokIn: Address,
    _tokOut: Address,
    _amtIn: BigInt,
    _minOut: BigInt,
    _walletID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "makeSwap",
      "makeSwap(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokIn),
        ethereum.Value.fromAddress(_tokOut),
        ethereum.Value.fromUnsignedBigInt(_amtIn),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newWallet(name: string): boolean {
    let result = super.call("newWallet", "newWallet(string):(bool)", [
      ethereum.Value.fromString(name)
    ]);

    return result[0].toBoolean();
  }

  try_newWallet(name: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("newWallet", "newWallet(string):(bool)", [
      ethereum.Value.fromString(name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  persistWallet(_walletID: BigInt): string {
    let result = super.call(
      "persistWallet",
      "persistWallet(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );

    return result[0].toString();
  }

  try_persistWallet(_walletID: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "persistWallet",
      "persistWallet(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_walletID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  removeLiquidity(
    _tok1: Address,
    _tok2: Address,
    _liquidity: BigInt,
    _min1: BigInt,
    _min2: BigInt,
    _walletID: BigInt
  ): Bytes {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(_tok1),
        ethereum.Value.fromAddress(_tok2),
        ethereum.Value.fromUnsignedBigInt(_liquidity),
        ethereum.Value.fromUnsignedBigInt(_min1),
        ethereum.Value.fromUnsignedBigInt(_min2),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );

    return result[0].toBytes();
  }

  try_removeLiquidity(
    _tok1: Address,
    _tok2: Address,
    _liquidity: BigInt,
    _min1: BigInt,
    _min2: BigInt,
    _walletID: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(_tok1),
        ethereum.Value.fromAddress(_tok2),
        ethereum.Value.fromUnsignedBigInt(_liquidity),
        ethereum.Value.fromUnsignedBigInt(_min1),
        ethereum.Value.fromUnsignedBigInt(_min2),
        ethereum.Value.fromUnsignedBigInt(_walletID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  walletIDToWallet(param0: BigInt): CentroMain__walletIDToWalletResult {
    let result = super.call(
      "walletIDToWallet",
      "walletIDToWallet(uint256):(string,string,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CentroMain__walletIDToWalletResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_walletIDToWallet(
    param0: BigInt
  ): ethereum.CallResult<CentroMain__walletIDToWalletResult> {
    let result = super.tryCall(
      "walletIDToWallet",
      "walletIDToWallet(uint256):(string,string,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CentroMain__walletIDToWalletResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _store(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _siphonAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get toAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _tok1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amt1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amt2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amount1(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount2(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddLiquidityFromOneCall extends ethereum.Call {
  get inputs(): AddLiquidityFromOneCall__Inputs {
    return new AddLiquidityFromOneCall__Inputs(this);
  }

  get outputs(): AddLiquidityFromOneCall__Outputs {
    return new AddLiquidityFromOneCall__Outputs(this);
  }
}

export class AddLiquidityFromOneCall__Inputs {
  _call: AddLiquidityFromOneCall;

  constructor(call: AddLiquidityFromOneCall) {
    this._call = call;
  }

  get _baseToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _baseAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tok1(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddLiquidityFromOneCall__Outputs {
  _call: AddLiquidityFromOneCall;

  constructor(call: AddLiquidityFromOneCall) {
    this._call = call;
  }
}

export class BuyCeloCall extends ethereum.Call {
  get inputs(): BuyCeloCall__Inputs {
    return new BuyCeloCall__Inputs(this);
  }

  get outputs(): BuyCeloCall__Outputs {
    return new BuyCeloCall__Outputs(this);
  }
}

export class BuyCeloCall__Inputs {
  _call: BuyCeloCall;

  constructor(call: BuyCeloCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxSellAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyCeloCall__Outputs {
  _call: BuyCeloCall;

  constructor(call: BuyCeloCall) {
    this._call = call;
  }
}

export class ClaimRewardFromPairCall extends ethereum.Call {
  get inputs(): ClaimRewardFromPairCall__Inputs {
    return new ClaimRewardFromPairCall__Inputs(this);
  }

  get outputs(): ClaimRewardFromPairCall__Outputs {
    return new ClaimRewardFromPairCall__Outputs(this);
  }
}

export class ClaimRewardFromPairCall__Inputs {
  _call: ClaimRewardFromPairCall;

  constructor(call: ClaimRewardFromPairCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimRewardFromPairCall__Outputs {
  _call: ClaimRewardFromPairCall;

  constructor(call: ClaimRewardFromPairCall) {
    this._call = call;
  }

  get _earned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimRewardFromTokensCall extends ethereum.Call {
  get inputs(): ClaimRewardFromTokensCall__Inputs {
    return new ClaimRewardFromTokensCall__Inputs(this);
  }

  get outputs(): ClaimRewardFromTokensCall__Outputs {
    return new ClaimRewardFromTokensCall__Outputs(this);
  }
}

export class ClaimRewardFromTokensCall__Inputs {
  _call: ClaimRewardFromTokensCall;

  constructor(call: ClaimRewardFromTokensCall) {
    this._call = call;
  }

  get _tok1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimRewardFromTokensCall__Outputs {
  _call: ClaimRewardFromTokensCall;

  constructor(call: ClaimRewardFromTokensCall) {
    this._call = call;
  }

  get _earned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CompoundFarmPairCall extends ethereum.Call {
  get inputs(): CompoundFarmPairCall__Inputs {
    return new CompoundFarmPairCall__Inputs(this);
  }

  get outputs(): CompoundFarmPairCall__Outputs {
    return new CompoundFarmPairCall__Outputs(this);
  }
}

export class CompoundFarmPairCall__Inputs {
  _call: CompoundFarmPairCall;

  constructor(call: CompoundFarmPairCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CompoundFarmPairCall__Outputs {
  _call: CompoundFarmPairCall;

  constructor(call: CompoundFarmPairCall) {
    this._call = call;
  }
}

export class CompoundFarmTokensCall extends ethereum.Call {
  get inputs(): CompoundFarmTokensCall__Inputs {
    return new CompoundFarmTokensCall__Inputs(this);
  }

  get outputs(): CompoundFarmTokensCall__Outputs {
    return new CompoundFarmTokensCall__Outputs(this);
  }
}

export class CompoundFarmTokensCall__Inputs {
  _call: CompoundFarmTokensCall;

  constructor(call: CompoundFarmTokensCall) {
    this._call = call;
  }

  get _tok1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CompoundFarmTokensCall__Outputs {
  _call: CompoundFarmTokensCall;

  constructor(call: CompoundFarmTokensCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class MakeSwapCall extends ethereum.Call {
  get inputs(): MakeSwapCall__Inputs {
    return new MakeSwapCall__Inputs(this);
  }

  get outputs(): MakeSwapCall__Outputs {
    return new MakeSwapCall__Outputs(this);
  }
}

export class MakeSwapCall__Inputs {
  _call: MakeSwapCall;

  constructor(call: MakeSwapCall) {
    this._call = call;
  }

  get _tokIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amtIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class MakeSwapCall__Outputs {
  _call: MakeSwapCall;

  constructor(call: MakeSwapCall) {
    this._call = call;
  }

  get _received(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MoolaDepositCall extends ethereum.Call {
  get inputs(): MoolaDepositCall__Inputs {
    return new MoolaDepositCall__Inputs(this);
  }

  get outputs(): MoolaDepositCall__Outputs {
    return new MoolaDepositCall__Outputs(this);
  }
}

export class MoolaDepositCall__Inputs {
  _call: MoolaDepositCall;

  constructor(call: MoolaDepositCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MoolaDepositCall__Outputs {
  _call: MoolaDepositCall;

  constructor(call: MoolaDepositCall) {
    this._call = call;
  }
}

export class MoolaWithdrawCall extends ethereum.Call {
  get inputs(): MoolaWithdrawCall__Inputs {
    return new MoolaWithdrawCall__Inputs(this);
  }

  get outputs(): MoolaWithdrawCall__Outputs {
    return new MoolaWithdrawCall__Outputs(this);
  }
}

export class MoolaWithdrawCall__Inputs {
  _call: MoolaWithdrawCall;

  constructor(call: MoolaWithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MoolaWithdrawCall__Outputs {
  _call: MoolaWithdrawCall;

  constructor(call: MoolaWithdrawCall) {
    this._call = call;
  }
}

export class NewWalletCall extends ethereum.Call {
  get inputs(): NewWalletCall__Inputs {
    return new NewWalletCall__Inputs(this);
  }

  get outputs(): NewWalletCall__Outputs {
    return new NewWalletCall__Outputs(this);
  }
}

export class NewWalletCall__Inputs {
  _call: NewWalletCall;

  constructor(call: NewWalletCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class NewWalletCall__Outputs {
  _call: NewWalletCall;

  constructor(call: NewWalletCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OneTokenToFarmCall extends ethereum.Call {
  get inputs(): OneTokenToFarmCall__Inputs {
    return new OneTokenToFarmCall__Inputs(this);
  }

  get outputs(): OneTokenToFarmCall__Outputs {
    return new OneTokenToFarmCall__Outputs(this);
  }
}

export class OneTokenToFarmCall__Inputs {
  _call: OneTokenToFarmCall;

  constructor(call: OneTokenToFarmCall) {
    this._call = call;
  }

  get _baseToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _baseAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tok1(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OneTokenToFarmCall__Outputs {
  _call: OneTokenToFarmCall;

  constructor(call: OneTokenToFarmCall) {
    this._call = call;
  }
}

export class PersistWalletCall extends ethereum.Call {
  get inputs(): PersistWalletCall__Inputs {
    return new PersistWalletCall__Inputs(this);
  }

  get outputs(): PersistWalletCall__Outputs {
    return new PersistWalletCall__Outputs(this);
  }
}

export class PersistWalletCall__Inputs {
  _call: PersistWalletCall;

  constructor(call: PersistWalletCall) {
    this._call = call;
  }

  get _walletID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PersistWalletCall__Outputs {
  _call: PersistWalletCall;

  constructor(call: PersistWalletCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get _tok1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _min1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _min2(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SellCeloCall extends ethereum.Call {
  get inputs(): SellCeloCall__Inputs {
    return new SellCeloCall__Inputs(this);
  }

  get outputs(): SellCeloCall__Outputs {
    return new SellCeloCall__Outputs(this);
  }
}

export class SellCeloCall__Inputs {
  _call: SellCeloCall;

  constructor(call: SellCeloCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minBuyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellCeloCall__Outputs {
  _call: SellCeloCall;

  constructor(call: SellCeloCall) {
    this._call = call;
  }
}

export class SendCall extends ethereum.Call {
  get inputs(): SendCall__Inputs {
    return new SendCall__Inputs(this);
  }

  get outputs(): SendCall__Outputs {
    return new SendCall__Outputs(this);
  }
}

export class SendCall__Inputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SendCall__Outputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }
}

export class StakeLiquidityCall extends ethereum.Call {
  get inputs(): StakeLiquidityCall__Inputs {
    return new StakeLiquidityCall__Inputs(this);
  }

  get outputs(): StakeLiquidityCall__Outputs {
    return new StakeLiquidityCall__Outputs(this);
  }
}

export class StakeLiquidityCall__Inputs {
  _call: StakeLiquidityCall;

  constructor(call: StakeLiquidityCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakeLiquidityCall__Outputs {
  _call: StakeLiquidityCall;

  constructor(call: StakeLiquidityCall) {
    this._call = call;
  }
}

export class TwoTokensToFarmCall extends ethereum.Call {
  get inputs(): TwoTokensToFarmCall__Inputs {
    return new TwoTokensToFarmCall__Inputs(this);
  }

  get outputs(): TwoTokensToFarmCall__Outputs {
    return new TwoTokensToFarmCall__Outputs(this);
  }
}

export class TwoTokensToFarmCall__Inputs {
  _call: TwoTokensToFarmCall;

  constructor(call: TwoTokensToFarmCall) {
    this._call = call;
  }

  get _tok1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amt1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amt2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class TwoTokensToFarmCall__Outputs {
  _call: TwoTokensToFarmCall;

  constructor(call: TwoTokensToFarmCall) {
    this._call = call;
  }
}

export class UbeStakeTokensCall extends ethereum.Call {
  get inputs(): UbeStakeTokensCall__Inputs {
    return new UbeStakeTokensCall__Inputs(this);
  }

  get outputs(): UbeStakeTokensCall__Outputs {
    return new UbeStakeTokensCall__Outputs(this);
  }
}

export class UbeStakeTokensCall__Inputs {
  _call: UbeStakeTokensCall;

  constructor(call: UbeStakeTokensCall) {
    this._call = call;
  }

  get _tok1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tok2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UbeStakeTokensCall__Outputs {
  _call: UbeStakeTokensCall;

  constructor(call: UbeStakeTokensCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawLiquidityPairCall extends ethereum.Call {
  get inputs(): WithdrawLiquidityPairCall__Inputs {
    return new WithdrawLiquidityPairCall__Inputs(this);
  }

  get outputs(): WithdrawLiquidityPairCall__Outputs {
    return new WithdrawLiquidityPairCall__Outputs(this);
  }
}

export class WithdrawLiquidityPairCall__Inputs {
  _call: WithdrawLiquidityPairCall;

  constructor(call: WithdrawLiquidityPairCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _walletId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawLiquidityPairCall__Outputs {
  _call: WithdrawLiquidityPairCall;

  constructor(call: WithdrawLiquidityPairCall) {
    this._call = call;
  }
}
