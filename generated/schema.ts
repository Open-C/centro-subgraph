// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExampleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExampleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): ExampleEntity | null {
    return store.get("ExampleEntity", id) as ExampleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }
}

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Asset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Asset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Asset", id.toString(), this);
  }

  static load(id: string): Asset | null {
    return store.get("Asset", id) as Asset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }
}

export class CentroData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CentroData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CentroData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CentroData", id.toString(), this);
  }

  static load(id: string): CentroData | null {
    return store.get("CentroData", id) as CentroData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAssets(): Array<string | null> {
    let value = this.get("totalAssets");
    return value.toStringArray();
  }

  set totalAssets(value: Array<string | null>) {
    this.set("totalAssets", Value.fromStringArray(value));
  }

  get users(): BigInt {
    let value = this.get("users");
    return value.toBigInt();
  }

  set users(value: BigInt) {
    this.set("users", Value.fromBigInt(value));
  }

  get wallets(): BigInt {
    let value = this.get("wallets");
    return value.toBigInt();
  }

  set wallets(value: BigInt) {
    this.set("wallets", Value.fromBigInt(value));
  }
}

export class CentroDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CentroDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CentroDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CentroDayData", id.toString(), this);
  }

  static load(id: string): CentroDayData | null {
    return store.get("CentroDayData", id) as CentroDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get totalAssets(): Array<string | null> {
    let value = this.get("totalAssets");
    return value.toStringArray();
  }

  set totalAssets(value: Array<string | null>) {
    this.set("totalAssets", Value.fromStringArray(value));
  }

  get users(): BigInt {
    let value = this.get("users");
    return value.toBigInt();
  }

  set users(value: BigInt) {
    this.set("users", Value.fromBigInt(value));
  }

  get wallets(): BigInt {
    let value = this.get("wallets");
    return value.toBigInt();
  }

  set wallets(value: BigInt) {
    this.set("wallets", Value.fromBigInt(value));
  }
}

export class CentroHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CentroHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CentroHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CentroHourData", id.toString(), this);
  }

  static load(id: string): CentroHourData | null {
    return store.get("CentroHourData", id) as CentroHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get totalAssets(): Array<string | null> {
    let value = this.get("totalAssets");
    return value.toStringArray();
  }

  set totalAssets(value: Array<string | null>) {
    this.set("totalAssets", Value.fromStringArray(value));
  }

  get users(): BigInt {
    let value = this.get("users");
    return value.toBigInt();
  }

  set users(value: BigInt) {
    this.set("users", Value.fromBigInt(value));
  }

  get wallets(): BigInt {
    let value = this.get("wallets");
    return value.toBigInt();
  }

  set wallets(value: BigInt) {
    this.set("wallets", Value.fromBigInt(value));
  }
}

export class WalletDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WalletDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WalletDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WalletDayData", id.toString(), this);
  }

  static load(id: string): WalletDayData | null {
    return store.get("WalletDayData", id) as WalletDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get basis(): Array<string | null> {
    let value = this.get("basis");
    return value.toStringArray();
  }

  set basis(value: Array<string | null>) {
    this.set("basis", Value.fromStringArray(value));
  }

  get assets(): Array<string | null> {
    let value = this.get("assets");
    return value.toStringArray();
  }

  set assets(value: Array<string | null>) {
    this.set("assets", Value.fromStringArray(value));
  }
}

export class WalletHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WalletHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WalletHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WalletHourData", id.toString(), this);
  }

  static load(id: string): WalletHourData | null {
    return store.get("WalletHourData", id) as WalletHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get basis(): Array<string | null> {
    let value = this.get("basis");
    return value.toStringArray();
  }

  set basis(value: Array<string | null>) {
    this.set("basis", Value.fromStringArray(value));
  }

  get assets(): Array<string | null> {
    let value = this.get("assets");
    return value.toStringArray();
  }

  set assets(value: Array<string | null>) {
    this.set("assets", Value.fromStringArray(value));
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Wallet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Wallet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Wallet", id.toString(), this);
  }

  static load(id: string): Wallet | null {
    return store.get("Wallet", id) as Wallet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get createdOn(): i32 {
    let value = this.get("createdOn");
    return value.toI32();
  }

  set createdOn(value: i32) {
    this.set("createdOn", Value.fromI32(value));
  }

  get basis(): Array<string | null> {
    let value = this.get("basis");
    return value.toStringArray();
  }

  set basis(value: Array<string | null>) {
    this.set("basis", Value.fromStringArray(value));
  }

  get assets(): Array<string | null> {
    let value = this.get("assets");
    return value.toStringArray();
  }

  set assets(value: Array<string | null>) {
    this.set("assets", Value.fromStringArray(value));
  }

  get byDay(): string | null {
    let value = this.get("byDay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set byDay(value: string | null) {
    if (value === null) {
      this.unset("byDay");
    } else {
      this.set("byDay", Value.fromString(value as string));
    }
  }

  get locked(): Array<string | null> {
    let value = this.get("locked");
    return value.toStringArray();
  }

  set locked(value: Array<string | null>) {
    this.set("locked", Value.fromStringArray(value));
  }
}

export class UbeLock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UbeLock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UbeLock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UbeLock", id.toString(), this);
  }

  static load(id: string): UbeLock | null {
    return store.get("UbeLock", id) as UbeLock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get assetsLocked(): Array<string | null> {
    let value = this.get("assetsLocked");
    return value.toStringArray();
  }

  set assetsLocked(value: Array<string | null>) {
    this.set("assetsLocked", Value.fromStringArray(value));
  }

  get swaps(): Array<string | null> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string | null>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocknumber(): i32 {
    let value = this.get("blocknumber");
    return value.toI32();
  }

  set blocknumber(value: i32) {
    this.set("blocknumber", Value.fromI32(value));
  }

  get assetIn(): string {
    let value = this.get("assetIn");
    return value.toString();
  }

  set assetIn(value: string) {
    this.set("assetIn", Value.fromString(value));
  }

  get assetOut(): string {
    let value = this.get("assetOut");
    return value.toString();
  }

  set assetOut(value: string) {
    this.set("assetOut", Value.fromString(value));
  }
}
